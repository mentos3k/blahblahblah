<!DOCTYPE html>
<html>
<head>
  <title>🚩 Aggressive Sandbox Tamper PoC</title>
</head>
<body>
  <h2>🚩 Extreme Sandbox PoC — for Defender Logging Only</h2>
  <pre id="log"></pre>

  <script>
    const log = msg => {
      console.log("[PoC] " + msg);
      document.getElementById("log").textContent += msg + "\n";
    };

    log("✅ PoC started");
    log("📅 " + new Date());

    // Simulate listing system users
    const fakeUsersBefore = ["SYSTEM", "Administrator", "User1"];
    log("👤 System users BEFORE: " + fakeUsersBefore.join(", "));

    // Aggressive WASM JIT spam
    log("🚀 Starting WASM JIT spam");
    const wasmBin = new Uint8Array([
      0x00,0x61,0x73,0x6D,0x01,0x00,0x00,0x00,
      0x01,0x04,0x01,0x60,0x00,0x00,
      0x03,0x02,0x01,0x00,
      0x07,0x07,0x01,0x03,0x66,0x6F,0x6F,0x00,0x00,
      0x0A,0x09,0x01,0x07,0x00,0x41,0x2A,0x41,0x2A,0x6A,0x0B
    ]);
    for (let i = 0; i < 10000; i++) {
      WebAssembly.instantiate(wasmBin).then(obj => obj.instance.exports.foo());
      if (i % 2000 === 0) log(`🧩 WASM module #${i}`);
    }

    // Attempt suspicious eval chain
    log("⚙️ Executing suspicious eval chain");
    const suspiciousCode = "log('🕳️ Running dynamic code injection test')";
    eval(suspiciousCode);
    new Function(suspiciousCode)();

    // Fake command execution simulation
    log("🔧 Simulating command line: whoami && net user");
    try {
      const fakeCmd = new Function("log('🧨 [SIMULATED CMD] whoami: fakeuser')");
      fakeCmd();
    } catch (e) { log("❌ CMD blocked: " + e); }

    // Simulate elevation by spoofing new user list
    const fakeUsersAfter = ["SYSTEM", "Administrator", "User1", "EvilRoot"];
    log("👑 System users AFTER: " + fakeUsersAfter.join(", "));

    // Huge allocation to stress GPU/memory
    log("💾 Allocating 4GB buffer");
    try {
      const huge = new ArrayBuffer(4 * 1024 * 1024 * 1024);
      log("✅ Allocated: " + huge.byteLength + " bytes");
    } catch (e) {
      log("❌ Allocation failed: " + e);
    }

    // Attempt fake sandbox bypass
    try {
      Object.defineProperty(navigator, "userAgent", {
        value: "EvilUserAgent",
        configurable: true
      });
      log("🚫 Sandbox bypass test: userAgent changed");
    } catch (e) {
      log("✅ Sandbox block: " + e);
    }

    // Force crash after delay
    setTimeout(() => {
      log("💥 Intentional crash: Big string join");
      const crash = new Array(1e10).join("A");
    }, 5000);

    log("🔚 Script finished main stage — watch Defender logs now!");
  </script>
</body>
</html>
